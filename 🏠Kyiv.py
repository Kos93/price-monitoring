import streamlit as st
import pandas as pd
import re
from streamlit_gsheets import GSheetsConnection
from st_aggrid import AgGrid, GridOptionsBuilder
import locale

try:
    locale.setlocale(locale.LC_ALL, 'uk_UA.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'uk_UA')
    except:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ª–æ–∫–∞–ª—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω–∞ –ª–æ–∫–∞–ª—å.")

st.set_page_config(
    page_title="–ö–∏—ó–≤",
    page_icon="üìà",
    layout="wide"
)



col1, col2 = st.columns(2)

with col1:
    st.title("–ö–∏—ó–≤ —Ü—ñ–Ω–∏")

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
    url = "1IdRGszdGFp9cqn3gD5bD1UJmUMSEe088Ov4T_7_GRn4"  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è (ID) –≤–∞—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    conn = st.connection("gsheets", type=GSheetsConnection)
    data = conn.read(spreadsheet=url, usecols=None)

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å 'id', —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if 'id' in data.columns:
        data.drop(columns='id', inplace=True)

    first_col = data.columns[0]
    gb = GridOptionsBuilder.from_dataframe(data)
    gb.configure_column(first_col, pinned='left', filter='agSetColumnFilter')
    gridOptions = gb.build()

    AgGrid(data, gridOptions=gridOptions)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ —î –¥–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy)
    date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    date_columns = [col for col in data.columns if isinstance(col, str) and re.match(date_pattern, col)]

    # –°—Ç–æ–≤–ø—Ü—ñ, —è–∫—ñ –Ω–µ —î –¥–∞—Ç–∞–º–∏ (–∫–æ—Ä–∏–≥—É–π—Ç–µ –ø—ñ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    id_vars = [col for col in data.columns if col not in date_columns]

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑ "—à–∏—Ä–æ–∫–æ–≥–æ" —Ñ–æ—Ä–º–∞—Ç—É –≤ "–¥–æ–≤–≥–∏–π"
    try:
        long_df = data.melt(
            id_vars=id_vars,
            value_vars=date_columns,
            var_name="–î–∞—Ç–∞",
            value_name="–¶—ñ–Ω–∞"
        )
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        st.stop()

    # –û—á–∏—â–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω (–∑–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫–∏ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –Ω–µ—á–∏—Å–ª–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏)
    long_df["–¶—ñ–Ω–∞"] = long_df["–¶—ñ–Ω–∞"].astype(str).str.replace(',', '.').str.replace(r'[^\d.]', '', regex=True)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ "–î–∞—Ç–∞" —É datetime
    long_df["–î–∞—Ç–∞"] = pd.to_datetime(long_df["–î–∞—Ç–∞"], format="%d.%m.%Y", errors="coerce")

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ "–¶—ñ–Ω–∞" —É float –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
    long_df["–¶—ñ–Ω–∞"] = pd.to_numeric(long_df["–¶—ñ–Ω–∞"], errors="coerce")

    # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏ –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º–∏ —Ü—ñ–Ω–∞–º–∏ –∞–±–æ –¥–∞—Ç–∞–º–∏
    long_df = long_df.dropna(subset=["–î–∞—Ç–∞", "–¶—ñ–Ω–∞"])

    # –í—ñ–¥–∂–µ—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    available_products = long_df["–¢–æ–≤–∞—Ä"].unique().tolist()

    min_date = long_df["–î–∞—Ç–∞"].min()
    max_date = long_df["–î–∞—Ç–∞"].max()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞—Ç
    if pd.isna(min_date) or pd.isna(max_date):
        st.error("–ü–æ–º–∏–ª–∫–∞ —É –¥–∞—Ç–∞—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç —É —Ç–∞–±–ª–∏—Ü—ñ.")
        st.stop()

    date_range = st.date_input(
        label="–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —ñ –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç–∏:",
        value=[min_date, max_date],
        min_value=min_date,
        max_value=max_date,
        format="DD.MM.YYYY"
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –≤–∏–±—Ä–∞–Ω–æ –¥–≤—ñ –¥–∞—Ç–∏
    if len(date_range) < 2:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–∞ –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç–∏ (–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è).")
        st.stop()
    else:
        start_date, end_date = date_range

    # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –¥–∞—Ç
    days_diff = (end_date - start_date).days
    if days_diff > 730:
        st.warning(f"–í–∏–±—Ä–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ({days_diff} –¥–Ω—ñ–≤) –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–±—Ä–∞—Ç–∏ –º–µ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥ (–¥–æ 730 –¥–Ω—ñ–≤).")

    selected_products = st.multiselect(
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—ó (–¢–æ–≤–∞—Ä) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:",
        options=available_products,
        default=available_products[:2] if len(available_products) >= 2 else available_products[:1]
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
    if not selected_products:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        st.stop()

    # –§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
    filtered_for_chart = long_df[
        (long_df["–¢–æ–≤–∞—Ä"].isin(selected_products)) &
        (long_df["–î–∞—Ç–∞"] >= pd.to_datetime(start_date)) &
        (long_df["–î–∞—Ç–∞"] <= pd.to_datetime(end_date))
    ].copy()

    if filtered_for_chart.empty:
        st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤–∏–±—Ä–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –¥–∞—Ç –∞–±–æ –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
        st.stop()

    # –ë—É–¥—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
    filtered_for_chart.sort_values(by=["–¢–æ–≤–∞—Ä", "–î–∞—Ç–∞"], inplace=True)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    duplicate_check = filtered_for_chart.duplicated(subset=["–î–∞—Ç–∞", "–¢–æ–≤–∞—Ä"])
    if duplicate_check.any():
        # –£—Å—É–≤–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑–∞–ª–∏—à–∞—é—á–∏ –æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
        st.warning(f"–í–∏—è–≤–ª–µ–Ω–æ {duplicate_check.sum()} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        filtered_for_chart = filtered_for_chart.drop_duplicates(subset=["–î–∞—Ç–∞", "–¢–æ–≤–∞—Ä"], keep="last")
    
    try:
        pivot_chart = filtered_for_chart.pivot(index="–î–∞—Ç–∞", columns="–¢–æ–≤–∞—Ä", values="–¶—ñ–Ω–∞")
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω")
        st.line_chart(pivot_chart)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∞: {e}")
        st.write("–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ.")

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó/–∫—ñ–Ω—Ü–µ–≤–æ—ó —Ü—ñ–Ω–∏
    results = []

    for product in selected_products:
        try:
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä —É –∑–∞—Ö–∏—â–µ–Ω–æ–º—É –±–ª–æ—Ü—ñ try-except
            product_data = filtered_for_chart[filtered_for_chart["–¢–æ–≤–∞—Ä"] == product].copy()
            
            if product_data.empty:
                results.append({
                    "–¢–æ–≤–∞—Ä": product,
                    "–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞": None,
                    "–ö—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–Ω–∞": None,
                    "–ó–º—ñ–Ω–∞, %": None,
                    "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞": None,
                    "–ú–∞–∫—Å. —Ü—ñ–Ω–∞": None,
                    "–î–∞—Ç–∞ –º–∞–∫—Å.": None
                })
                continue

            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é
            product_data.sort_values("–î–∞—Ç–∞", inplace=True)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ "—Å—É—Ü—ñ–ª—å–Ω–∏–π" —Ä—è–¥ –¥–∞—Ç –≤—ñ–¥ start_date –¥–æ end_date
            date_range_df = pd.DataFrame(
                index=pd.date_range(start=start_date, end=end_date, freq="D")
            )
            date_range_df.index.name = "–î–∞—Ç–∞"
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è reindex
            product_prices = product_data.set_index("–î–∞—Ç–∞")["–¶—ñ–Ω–∞"]
            
            # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –ø–∞–º'—è—Ç—Ç—é
            if len(date_range_df) > 731:
                st.warning(f"–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è {product} –æ–±–º–µ–∂–µ–Ω–æ –¥–æ 731 –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω–Ω—é.")
                date_range_df = date_range_df.iloc[:731]
            
            # Reindex –∑ –æ–±–º–µ–∂–µ–Ω–∏–º –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º –ø—Ä–æ–ø—É—Å–∫—ñ–≤
            reindexed_prices = product_prices.reindex(date_range_df.index)
            
            # –û–±–º–µ–∂–µ–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—Å–∫—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 30 –¥–Ω—ñ–≤)
            reindexed_prices = reindexed_prices.bfill(limit=30).ffill(limit=30)
            
            # –Ø–∫—â–æ –≤—Å–µ —â–µ —î –ø—Ä–æ–ø—É—Å–∫–∏, –∑–∞–ø–æ–≤–Ω—é—î–º–æ —ó—Ö —Å–µ—Ä–µ–¥–Ω—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
            if reindexed_prices.isna().any():
                mean_price = product_prices.mean()
                reindexed_prices = reindexed_prices.fillna(mean_price)
            
            # –ë–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —ñ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É
            initial_price = reindexed_prices.iloc[0] if not reindexed_prices.empty else None
            final_price = reindexed_prices.iloc[-1] if not reindexed_prices.empty and len(reindexed_prices) > 1 else initial_price
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ –∑–º—ñ–Ω–∏
            if pd.isna(initial_price) or initial_price == 0 or pd.isna(final_price):
                percent_change = None
            else:
                percent_change = ((final_price - initial_price) / initial_price) * 100
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            avg_price = reindexed_prices.mean()
            max_price = reindexed_prices.max()
            
            if not pd.isna(max_price) and max_price > 0:
                max_indices = reindexed_prices[reindexed_prices == max_price].index
                if not max_indices.empty:
                    max_date = max_indices[0].strftime('%d.%m.%Y') # type: ignore
                else:
                    max_date = None
            else:
                max_date = None
            
            results.append({
                "–¢–æ–≤–∞—Ä": product,
                "–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞": initial_price,
                "–ö—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–Ω–∞": final_price,
                "–ó–º—ñ–Ω–∞, %": round(percent_change, 1) if percent_change is not None else None,
                "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞": round(avg_price, 1) if not pd.isna(avg_price) else None,
                "–ú–∞–∫—Å. —Ü—ñ–Ω–∞": max_price if not pd.isna(max_price) else None,
                "–î–∞—Ç–∞ –º–∞–∫—Å.": max_date
            })
            
        except Exception as e:
            st.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–≤–∞—Ä—É '{product}': {str(e)}")
            results.append({
                "–¢–æ–≤–∞—Ä": product,
                "–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞": None,
                "–ö—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–Ω–∞": None,
                "–ó–º—ñ–Ω–∞, %": None,
                "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞": None,
                "–ú–∞–∫—Å. —Ü—ñ–Ω–∞": None,
                "–î–∞—Ç–∞ –º–∞–∫—Å.": "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏"
            })

    result_df = pd.DataFrame(results)

    # –ö–æ–ª—å–æ—Ä–æ–≤–µ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    def highlight_change(val): # type: ignore
        if pd.isna(val):
            return "color: black;"
        elif val > 0:
            return "color: red;"
        elif val < 0:
            return "color: green;"
        else:
            return "color: black;"

    styled_result_df = (
        result_df
        .style
        .applymap(highlight_change, subset=["–ó–º—ñ–Ω–∞, %"]) # type: ignore
        .format("{:.2f}", subset=["–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞", "–ö—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–Ω–∞", "–ó–º—ñ–Ω–∞, %", "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞", "–ú–∞–∫—Å. —Ü—ñ–Ω–∞"], na_rep="-")
    )

    st.subheader(f"–¢–∞–±–ª–∏—Ü—è –∑–º—ñ–Ω —Ü—ñ–Ω –∑ {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}")
    st.dataframe(styled_result_df, use_container_width=True)

with col2:
    st.title("–ö–∏—ó–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å")

    # Connect to Google Sheets
    url = "1v_3O4PpGVFTji4YQvJEdsyJ3Dcx5Sqtjp7QvrqH36bk"  # Google Sheet ID
    conn = st.connection("gsheets", type=GSheetsConnection)
    
    try:
        data = conn.read(spreadsheet=url, usecols=None)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        st.stop()

    # Remove 'id' column if it exists
    if 'id' in data.columns:
        data.drop(columns='id', inplace=True)

    # Display the full table with AgGrid
    first_col = data.columns[0]
    gb = GridOptionsBuilder.from_dataframe(data)
    gb.configure_column(first_col, pinned='left', filter='agSetColumnFilter')
    gridOptions = gb.build()
    AgGrid(data, gridOptions=gridOptions)

    # Identify date columns (format dd.mm.yyyy)
    date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    date_columns = [col for col in data.columns if isinstance(col, str) and re.match(date_pattern, col)]

    # Non-date columns (metadata)
    id_vars = [col for col in data.columns if col not in date_columns]

    # Hard limits for date selection
    hard_min_date = pd.to_datetime("2022-01-01")
    hard_max_date = pd.to_datetime("2025-12-31")

    # Convert wide format to long format
    if date_columns:
        try:
            long_df = pd.melt(
                data,
                id_vars=id_vars,
                value_vars=date_columns,
                var_name="–î–∞—Ç–∞",
                value_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å"
            )
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
            st.stop()

        # –û—á–∏—â–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (–∑–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫–∏ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –Ω–µ—á–∏—Å–ª–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏)
        long_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] = long_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"].astype(str).str.replace(',', '.').str.replace(r'[^\d.]', '', regex=True)

        # Convert "–î–∞—Ç–∞" to datetime
        long_df["–î–∞—Ç–∞"] = pd.to_datetime(long_df["–î–∞—Ç–∞"], format="%d.%m.%Y", errors="coerce")
        
        # Convert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å" to numeric, coercing errors to NaN
        long_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] = pd.to_numeric(long_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"], errors="coerce")
        
        # Remove rows with missing dates or quantities before filling
        long_df = long_df.dropna(subset=["–î–∞—Ç–∞"])
        
        # Fill NaN with 0 for quantity
        long_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] = long_df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"].fillna(0)
        
        # Check real min and max dates in the data
        if not long_df.empty and not long_df["–î–∞—Ç–∞"].isna().all():
            real_min_date = long_df["–î–∞—Ç–∞"].min()
            real_max_date = long_df["–î–∞—Ç–∞"].max()
            
            # Limit real dates by hard limits
            min_date = max(real_min_date, hard_min_date)
            max_date = min(real_max_date, hard_max_date)
            
            # Date selection widget
            date_range = st.date_input(
                label="–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —ñ –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç–∏:",
                value=[min_date, max_date],
                min_value=hard_min_date,
                max_value=hard_max_date,
                format="DD.MM.YYYY"
            )
            
            # Check that two dates are selected
            if len(date_range) < 2:
                st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–∞ –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç–∏ (–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è).")
                st.stop()
            else:
                start_date, end_date = date_range
            
            # Check that end_date is not earlier than start_date
            if end_date < start_date:
                st.warning("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó.")
                st.stop()
            
            # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –¥–∞—Ç
            days_diff = (end_date - start_date).days
            if days_diff > 730:
                st.warning(f"–í–∏–±—Ä–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ({days_diff} –¥–Ω—ñ–≤) –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–±—Ä–∞—Ç–∏ –º–µ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥ (–¥–æ 730 –¥–Ω—ñ–≤).")
            
            # Product selection
            product_column = "–¢–æ–≤–∞—Ä" if "–¢–æ–≤–∞—Ä" in id_vars else id_vars[0]
            available_products = long_df[product_column].unique().tolist()
            
            selected_products = st.multiselect(
                f"–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—ó ({product_column}) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:",
                options=available_products,
                default=available_products[:min(2, len(available_products))]
            )
            
            if selected_products:
                # Filter data for chart
                filtered_for_chart = long_df[
                    (long_df[product_column].isin(selected_products)) &
                    (long_df["–î–∞—Ç–∞"] >= pd.to_datetime(start_date)) &
                    (long_df["–î–∞—Ç–∞"] <= pd.to_datetime(end_date))
                ].copy()
                
                if not filtered_for_chart.empty:
                    filtered_for_chart.sort_values(by=[product_column, "–î–∞—Ç–∞"], inplace=True)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
                    duplicate_check = filtered_for_chart.duplicated(subset=["–î–∞—Ç–∞", product_column])
                    if duplicate_check.any():
                        # –£—Å—É–≤–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑–∞–ª–∏—à–∞—é—á–∏ –æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
                        st.warning(f"–í–∏—è–≤–ª–µ–Ω–æ {duplicate_check.sum()} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.")
                        filtered_for_chart = filtered_for_chart.drop_duplicates(subset=["–î–∞—Ç–∞", product_column], keep="last")
                    
                    try:
                        # Convert to wide format for chart
                        pivot_chart = filtered_for_chart.pivot(index="–î–∞—Ç–∞", columns=product_column, values="–ö—ñ–ª—å–∫—ñ—Å—Ç—å")
                        
                        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –¥–∏–Ω–∞–º—ñ–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ")
                        st.line_chart(pivot_chart)
                    except Exception as e:
                        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∞: {e}")
                        st.write("–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ.")
                    
                    # Calculate initial/final quantities and changes
                    results = []
                    
                    calc_df = long_df[long_df[product_column].isin(selected_products)].copy()
                    
                    for product in selected_products:
                        try:
                            product_data = calc_df[calc_df[product_column] == product].copy()
                            
                            if product_data.empty:
                                results.append({
                                    product_column: product,
                                    "–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                    "–ö—ñ–Ω—Ü–µ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                    "–ó–º—ñ–Ω–∞, %": None,
                                    "–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                    "–ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                    "–î–∞—Ç–∞ –º–∞–∫—Å.": None
                                })
                                continue
                            
                            product_data.sort_values("–î–∞—Ç–∞", inplace=True)
                            
                            # –°—Ç–≤–æ—Ä—é—î–º–æ "—Å—É—Ü—ñ–ª—å–Ω–∏–π" —Ä—è–¥ –¥–∞—Ç –≤—ñ–¥ start_date –¥–æ end_date
                            date_range_df = pd.DataFrame(
                                index=pd.date_range(start=start_date, end=end_date, freq="D")
                            )
                            date_range_df.index.name = "–î–∞—Ç–∞"
                            
                            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è reindex
                            product_quantities = product_data.set_index("–î–∞—Ç–∞")["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"]
                            
                            # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –ø–∞–º'—è—Ç—Ç—é
                            if len(date_range_df) > 731:
                                st.warning(f"–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è {product} –æ–±–º–µ–∂–µ–Ω–æ –¥–æ 731 –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω–Ω—é.")
                                date_range_df = date_range_df.iloc[:731]
                            
                            # Reindex –∑ –æ–±–º–µ–∂–µ–Ω–∏–º –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º –ø—Ä–æ–ø—É—Å–∫—ñ–≤
                            reindexed_quantities = product_quantities.reindex(date_range_df.index)
                            
                            # –û–±–º–µ–∂–µ–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—Å–∫—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 30 –¥–Ω—ñ–≤)
                            reindexed_quantities = reindexed_quantities.bfill(limit=30).ffill(limit=30)
                            
                            # –Ø–∫—â–æ –≤—Å–µ —â–µ —î –ø—Ä–æ–ø—É—Å–∫–∏, –∑–∞–ø–æ–≤–Ω—é—î–º–æ —ó—Ö —Å–µ—Ä–µ–¥–Ω—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –∞–±–æ –Ω—É–ª–µ–º
                            if reindexed_quantities.isna().any():
                                if product_quantities.count() > 0:
                                    mean_quantity = product_quantities.mean()
                                    reindexed_quantities = reindexed_quantities.fillna(mean_quantity)
                                else:
                                    reindexed_quantities = reindexed_quantities.fillna(0)
                            
                            # Initial and final values
                            initial_qty = reindexed_quantities.iloc[0] if not reindexed_quantities.empty else 0
                            final_qty = reindexed_quantities.iloc[-1] if not reindexed_quantities.empty and len(reindexed_quantities) > 1 else initial_qty
                            
                            # Calculate percentage change - improved to handle zero initial values
                            if pd.isna(initial_qty) or pd.isna(final_qty):
                                percent_change = None
                                status = "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
                            elif initial_qty == 0 and final_qty == 0:
                                percent_change = 0
                                status = "–°—Ç–∞–±—ñ–ª—å–Ω–æ"
                            elif initial_qty == 0 and final_qty > 0:
                                percent_change = 100  # Instead of infinity, mark as 100% (new item)
                                status = "–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä"
                            elif initial_qty > 0 and final_qty == 0:
                                percent_change = -100  # Complete reduction
                                status = "–ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ"
                            else:
                                percent_change = ((final_qty - initial_qty) / initial_qty) * 100
                                
                                if percent_change > 10:
                                    status = "–ó–Ω–∞—á–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è"
                                elif percent_change > 0:
                                    status = "–ó–±—ñ–ª—å—à–µ–Ω–Ω—è"
                                elif percent_change < -10:
                                    status = "–ó–Ω–∞—á–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è"
                                elif percent_change < 0:
                                    status = "–ó–º–µ–Ω—à–µ–Ω–Ω—è"
                                else:
                                    status = "–°—Ç–∞–±—ñ–ª—å–Ω–æ"
                            
                            # Additional metrics
                            avg_qty = reindexed_quantities.mean() if not reindexed_quantities.empty else 0
                            max_qty = reindexed_quantities.max() if not reindexed_quantities.empty else 0
                            
                            # Find the date of maximum quantity
                            if max_qty > 0 and not pd.isna(max_qty):
                                max_indices = reindexed_quantities[reindexed_quantities == max_qty].index
                                if not max_indices.empty:
                                    max_date = max_indices[0].strftime('%d.%m.%Y')
                                else:
                                    max_date = None
                            else:
                                max_date = None
                            
                            results.append({
                                product_column: product,
                                "–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": initial_qty,
                                "–ö—ñ–Ω—Ü–µ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": final_qty,
                                "–ó–º—ñ–Ω–∞, %": round(percent_change, 1) if percent_change is not None else None,
                                "–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å": round(avg_qty, 1) if not pd.isna(avg_qty) else None,
                                "–ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å": max_qty if not pd.isna(max_qty) else None,
                                "–î–∞—Ç–∞ –º–∞–∫—Å.": max_date
                            })
                        
                        except Exception as e:
                            st.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–≤–∞—Ä—É '{product}': {str(e)}")
                            results.append({
                                product_column: product,
                                "–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                "–ö—ñ–Ω—Ü–µ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                "–ó–º—ñ–Ω–∞, %": None,
                                "–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                "–ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å": None,
                                "–î–∞—Ç–∞ –º–∞–∫—Å.": "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏"
                            })
                    
                    result_df = pd.DataFrame(results)
                    
                    # Color highlighting for changes
                    def highlight_change(val, attr):
                        if attr != "–ó–º—ñ–Ω–∞, %":
                            return ""
                        
                        if pd.isna(val):
                            return "color: black;"
                        elif val > 20:
                            return "color: green; font-weight: bold"
                        elif val > 0:
                            return "color: green"
                        elif val < -20:
                            return "color: red; font-weight: bold"
                        elif val < 0:
                            return "color: red"
                        else:
                            return "color: gray"
                    
                    # Apply styling
                    styled_df = result_df.style
                    
                    # Apply highlighting for "–ó–º—ñ–Ω–∞, %" column
                    if "–ó–º—ñ–Ω–∞, %" in result_df.columns:
                        styled_df = styled_df.applymap(
                            lambda val, attr=None: highlight_change(val, attr),
                            subset=["–ó–º—ñ–Ω–∞, %"]
                        )
                    
                    # Format numbers
                    styled_df = styled_df.format({
                        "–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": "{:.2f}",
                        "–ö—ñ–Ω—Ü–µ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å": "{:.2f}",
                        "–ó–º—ñ–Ω–∞, %": "{:.1f}%",
                        "–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å": "{:.2f}",
                        "–ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å": "{:.2f}"
                    }, na_rep="-")
                    
                    st.subheader(f"–¢–∞–±–ª–∏—Ü—è –∑–º—ñ–Ω –∑ {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}")
                    st.dataframe(styled_df, use_container_width=True)
                    
                else:
                    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤–∏–±—Ä–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –¥–∞—Ç –∞–±–æ –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π.")
            else:
                st.warning(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        else:
            st.warning("–ù–µ–º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –¥–∞—Ç —É —Ç–∞–±–ª–∏—Ü—ñ.")
    else:
        st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑ –¥–∞—Ç–∞–º–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY")